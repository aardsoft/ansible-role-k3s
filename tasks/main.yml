- set_fact:
    _first_server: false

- name: set default password store
  set_fact:
    k3s_passdb: "{{passdb|default('passwordstore')}}"
  when: k3s_passdb is undefined

- name: set default kubeconfig location
  set_fact:
    _k3s_kubecfg: /etc/rancher/k3s/k3s.yaml

- name: load k3s config from k3s_clusters variable
  set_fact:
    _k3s_cfg: "{{k3s_clusters[k3s_cluster]}}"
  when: >
    _k3s_cfg is undefined and
    k3s_cluster is defined and
    k3s_clusters is defined and
    k3s_clusters[k3s_cluster] is defined

- name: load k3s config from k3s variable
  set_fact:
    _k3s_cfg: "{{k3s}}"
  when: >
    _k3s_cfg is undefined and
    k3s is defined

- name: set kubeconfig location override
  set_fact:
    _k3s_kubecfg: "{{_k3s_cfg.kubecfg}}"
  when: >-
    _k3s_cfg is defined and
    _k3s_cfg.kubecfg is defined

- name: check for first server
  set_fact:
    _first_server: true
  when: >
    ansible_all_ipv4_addresses is defined and
    _k3s_cfg.first_server in ansible_all_ipv4_addresses

- include_tasks: k3s_setup.yml
  when: _k3s_cfg is defined

# for leap we don't have the multiple python versions yet, so just stick
# with the generic 3 package
- set_fact:
    _python_version: 3

- set_fact:
    _python_version: "{{python_version}}"
  when: >
    python_version is defined and
    ansible_distribution != "openSUSE Leap"

- set_fact:
    role_packages:
      - "python{{_python_version}}-kubernetes"
      - nfs-client
      - open-iscsi
      - bash-completion
      - helm
      - helm-bash-completion
      - helmfile
      - helmfile-bash-completion
  when: >
    (ansible_os_family == "Suse" or
    ansible_os_family == "openSUSE MicroOS")

- include_role:
    name: data-utilities
    tasks_from: install_packages
  when: role_packages is defined

- include_tasks: test_cluster.yml
  when: >
    _k3s_cfg is defined and
    _k3s_cfg.test_cluster is defined and
    _k3s_cfg.test_cluster == true and
    k3s_role|default('agent') == 'server'

- include_tasks: deploy_longhorn.yml
  when: >
    _k3s_cfg is defined and
    _k3s_cfg.longhorn is defined and
    _k3s_cfg.longhorn.state is defined and
    _k3s_cfg.longhorn.state == 'present' and
    k3s_role|default('agent') == 'server' and
    _first_server == true

- include_tasks: remove_longhorn.yml
  when: >
    _k3s_cfg is defined and
    _k3s_cfg.longhorn is defined and
    _k3s_cfg.longhorn.state is defined and
    _k3s_cfg.longhorn.state == 'absent' and
    k3s_role|default('agent') == 'server' and
    _first_server == true

- name: run extra deployments
  include_tasks: "deployments.yml"
  with_dict: "{{_k3s_cfg.deployments|default({})}}"
  loop_control:
    loop_var: _deployment
  when: >
    k3s_role|default('agent') == 'server' and
    _first_server == true

# those tasks could be anything - so they're run against all cluster members.
# it's expected that the included tasks limit to roles or specific cluster
# members
- name: include additional tasks (cluster config)
  include_tasks: "tasks/{{_tasks}}.yml"
  with_items: "{{_k3s_cfg.extra_tasks}}"
  loop_control:
    loop_var: _tasks
  when: _k3s_cfg.extra_tasks is defined

- name: include additional tasks (global)
  include_tasks: "tasks/{{_tasks}}.yml"
  with_items: "{{k3s_extra_tasks}}"
  loop_control:
    loop_var: _tasks
  when: k3s_extra_tasks is defined
