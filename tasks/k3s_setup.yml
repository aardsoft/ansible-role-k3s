- name: check k3s service state
  ansible.builtin.systemd_service:
    name: k3s
  register: _k3s_status

- set_fact:
    _k3s_token: ""
    _k3s_token_passdb: ""
    _k3s_bind_args: ""
    _node_uninitialized: false

- set_fact:
    _k3s_token_passdb: "{{lookup(k3s_passdb, _k3s_cfg.node_token_passdb, missing='empty')}}"
  when: _k3s_cfg.node_token_passdb is defined

- set_fact:
    _k3s_installer: "{{local_bin|default('/usr/local/bin')}}/k3s_installer.sh"

- name: pull node token
  slurp:
    src: "/var/lib/rancher/k3s/server/node-token"
  register: _k3s_token_slurp
  changed_when: false
  ignore_errors: true
  no_log: true

- set_fact:
    _node_uninitialized: true
  when: >
    _k3s_token_slurp.failed == true and
    k3s_role|default('agent') == 'server'

- ansible.builtin.service_facts:
  when: k3s_role|default('agent') == 'agent'

- set_fact:
    _node_uninitialized: true
  when: >
    k3s_role|default('agent') == 'agent' and
    ansible_facts['services']['k3s-agent.service']['status'] | default('not-found') != 'enabled'

- name: copy k3s installer
  ansible.builtin.copy:
    src: k3s_installer.sh
    dest: "{{_k3s_installer}}"
    mode: 0755
    owner: root

- name: create k3s.service.de
  ansible.builtin.file:
    state: directory
    mode: 0755
    owner: root
    path: /etc/systemd/system/k3s.service.d

- name: copy longhorn environment check
  ansible.builtin.copy:
    src: longhorn/environment_check.sh
    dest: "{{local_bin|default('/usr/local/bin')}}/longhorn_environment_check"
    mode: 0755
    owner: root

- name: set bind address
  set_fact:
    _bind_address: "{{hostvars[inventory_hostname]['ansible_' + __iface].ipv4.address}}"
  loop_control:
    loop_var: __iface
  with_items: "{{hostvars[inventory_hostname]['ansible_interfaces']}}"
  when: >
    _k3s_cfg.bind_cidr is defined and
    _k3s_cfg.bind_cidr|ipaddr('network') == hostvars[inventory_hostname]['ansible_' + __iface].ipv4.network|default('N/A')

- name: add bind address to bind args
  set_fact:
    _k3s_bind_args: " {{_k3s_bind_args}} -i {{_bind_address}} --bind-address={{_bind_address}}"
  when: _bind_address is defined

- name: add service cidr to bind args
  set_fact:
    _k3s_bind_args: " {{_k3s_bind_args}} --service-cidr={{_k3s_cfg.service_cidr}}"
  when: _k3s_cfg.service_cidr is defined

- name: add cluster cidr to bind args
  set_fact:
    _k3s_bind_args: " {{_k3s_bind_args}} --cluster-cidr={{_k3s_cfg.cluster_cidr}}"
  when: _k3s_cfg.cluster_cidr is defined

- set_fact:
    _k3s_args: "{{k3s_role}} {{_k3s_bind_args}} {{_k3s_cfg.args|default('')}}"

- set_fact:
    _k3s_args: "{{_k3s_args}} --cluster-init --write-kubeconfig-mode=644"
  when: _first_server == true

- name: create k3s service drop-in
  ansible.builtin.template:
    src: k3s.conf.j2
    dest: /etc/systemd/system/k3s.service.d/10-exec.conf
    mode: 0644
    owner: root
  register: _dropin_status

- name: restart k3s
  ansible.builtin.systemd_service:
    name: k3s
    daemon_reload: true
    state: restarted
  when: _dropin_status is changed
  ignore_errors: true

- name: setup master
  include_tasks: setup_master.yml
  when: >
    _k3s_token_slurp.failed == true and
    k3s_role|default('agent') == 'server' and
    _first_server == true

- name: set k3s token
  set_fact:
    _k3s_token: "{{_k3s_token_slurp.content|b64decode|trim}}"
  when: >
    _k3s_token_slurp.failed == false and
    k3s_role|default('agent') == 'server' and
    _first_server == true

- name: add node token to password store
  set_fact:
    _dummy: "{{lookup(k3s_passdb, _k3s_cfg.node_token_passdb, create=true, userpass=_k3s_token)}}"
  when: >
    _k3s_cfg.node_token_passdb is defined and
    _k3s_token_passdb == "" and
    _first_server == true

- name: delegate k3s tokens
  include_tasks: delegate_token.yml
  with_items: "{{ansible_play_hosts}}"
  loop_control:
    loop_var: _delegate
  when: >
    _first_server == true

- name: use passdb token
  set_fact:
    _k3s_token: "{{_k3s_token_passdb}}"
  when: >
    _k3s_token == "" and
    _k3s_token_passdb != ""

- name: setup additional node
  include_tasks: setup_additional.yml
  when: >
    _first_server == false and
    _node_uninitialized == true and
    k3s_role is defined and
    _k3s_cfg.first_server is defined and
    _k3s_token != ""
